# DB
# Oracle
# url      => jdbc:oracle:thin:@//<host>:<port>/<service_name>
db.hlf.url = "jdbc:oracle:thin:@xxx.xxx.xxx.xxx:1521:SID"
# Postgres
# db.hlf.url = "jdbc:postgresql://localhost:5432/hlf_db"
# SQLServer
# db.hlf.url = "jdbc:jtds:sqlserver://host:1433:hlf_db"

# Usuario con que se conecta la aplicacion
db.hlf.user = bc_app
db.hlf.password = ????

# hikari https://github.com/brettwooldridge/HikariCP
db.hlf.hikari.maximumPoolSize = 1
db.hlf.hikari.connectionTimeout = 60000

# Nombre del schema donde estan creadas las tablas (owner)
db_hlf.schema = hlf

# Nombre de la package que recibe las invocaciones desde la aplicacion.
# Para Postgres debe quedar seteado con "".
db_hlf.package = bc_pkg
#db_hlf.package = ""
#db_hlf.package_verify=false

# Puerto para monitoreo
application.port = 8084

# FABRIC conf
# Nombre del peer preferido
fabric.preferred.peer = peer0.xxx.com

# Chaincode del cual se requiere registrar información. Se define utilizando una expresión regular. Por default se consumen transacciones de cualquier Chaincode
#fabric.chaincode.namespace.filter=."*"

# Nombre de la funcion que se requiere inspeccionar para registrar información. Se define utilizando una expresión regular. Por default se consumen transacciones generadas a cualquier invocación de función
#fabric.chaincode.fname.filter=."*"

# Regexp para filtrar nombres de peers alternativos al preferido
# Cuando el preferido no responde o esta mas atrasado que fabric.switch.blocks.threshold
# Block-Consumer swithea a algun peer alternativo cuyo nombre
# matchee con esta regexp
fabric.switch.peers.regexp = ".*"
fabric.switch.blocks.threshold = 10

# Nombre del channel
fabric.channel = padfedchannel

# Archivo de configuracion con la descripcion de la Blockchain
fabric.yaml.conf = /conf/client.yaml

# fabric.auth.type = fs: indica que block-consumer se va a autenticar con un certificado y una pk de MSP residente en el file system.
# El certificado debe ser emitido por la CA para MSP de la organizacion indicada en el archivo de configuracion ${fabric.yaml.conf} en client: organization:
fabric.auth.type = fs

fabric.channel=padfedchannel
fabric.yaml.conf=/conf/client.yaml

fabric.auth.type=fs
fabric.auth.appuser.name=User1
fabric.auth.appuser.keystore.path=/conf/crypto/client/blockconsumer"@"blockchain-tributaria.afip.gob.ar-msp.key
fabric.auth.appuser.certsign.path=/conf/crypto/client/blockconsumer"@"blockchain-tributaria.afip.gob.ar-msp.crt
fabric.tls.auth.appuser.keystore.path=/conf/crypto/client/blockconsumer"@"blockchain-tributaria.afip.gob.ar-tls-client.key
fabric.tls.auth.appuser.certsign.path=/conf/crypto/client/blockconsumer"@"blockchain-tributaria.afip.gob.ar-tls-client.crt

certificate.check.restrict=false

business {
  # Lista de expresiones regulares utilizadas por la aplicación para excluir del registro los datos consumidos.
  # El objetivo de esta propiedad es reducir el espacio requerido en la base de datos relacional y aumentar la velocidad de consumo excluyendo datos no requeridos
  # por el cliente.
  # Se pueden definir multiples expresiones regulares para evaluar cada calve persistida en Hyperledger Fabric. ej:  ["^(?!(AR|BR))(.*)$","^(.+)(?<!.*(IM|EX))$"]
  # exclusionKeys = []
}

databases {
  #################################
  # oracle
  #################################
  oracle {
    dataSourceClassName = oracle.jdbc.pool.OracleDataSource
    connectionTestQuery = SELECT 1 FROM DUAL
  }

  #################################
  # postgresql
  #################################
  postgresql {
    dataSourceClassName = org.postgresql.ds.PGSimpleDataSource
    connectionTestQuery = SELECT 1
  }

  ###############################################################################################
  # sqlserver
  # url => jdbc:jtds:sqlserver://host:port/database
  ###############################################################################################
  jtds {
    driverClassName = net.sourceforge.jtds.jdbc.Driver
    connectionTestQuery = SELECT 1
  }
}

fabric {
   netty {
     grpc {
       //keyAliveTime in Minutes
       NettyChannelBuilderOption.keepAliveTime="5"
       //keepAliveTimeout in Seconds
       NettyChannelBuilderOption.keepAliveTimeout="8"
       NettyChannelBuilderOption.keepAliveWithoutCalls="true"
       //maxInboundMessageSize in bytes
       NettyChannelBuilderOption.maxInboundMessageSize="50000000"
     }
   }

   sdk {
     peer.retry_wait_time = "5000"
   }
}
